// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_99b82a7eed3651b419f5350c1e133f4e_e8fbbf98_d847_4f4d_be0b_4b10d27a8c92 : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			return update.value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}

	public class Binding_99b82a7eed3651b419f5350c1e133f4e_6c018670_1cbe_41d3_b18e_0c4f59e48d5f : StringBinding
	{
		private Client CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (Client)UnityComponent;
		}
		public override string CoherenceComponentName => "ClientConnection_Client_8466908635430828435";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override string Value
		{
			get => (string)(System.String)(CastedUnityComponent.clientName);
			set => CastedUnityComponent.clientName = (System.String)(value);
		}

		protected override string ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (ClientConnection_Client_8466908635430828435)coherenceComponent;
			return update.clientName;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (ClientConnection_Client_8466908635430828435)coherenceComponent;
			update.clientName = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new ClientConnection_Client_8466908635430828435();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'ClientConnection' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncClientConnection : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncClientConnection>();
			if (coherenceSync.TryGetBindingByGuid("e8fbbf98-d847-4f4d-be0b-4b10d27a8c92", "position", out Binding InternalWorldPosition_Translation_value))
			{
				var clone = new Binding_99b82a7eed3651b419f5350c1e133f4e_e8fbbf98_d847_4f4d_be0b_4b10d27a8c92();
				InternalWorldPosition_Translation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldPosition_Translation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}
			if (coherenceSync.TryGetBindingByGuid("6c018670-1cbe-41d3-b18e-0c4f59e48d5f", "clientName", out Binding InternalClientConnection_Client_8466908635430828435_ClientConnection_Client_8466908635430828435_clientName))
			{
				var clone = new Binding_99b82a7eed3651b419f5350c1e133f4e_6c018670_1cbe_41d3_b18e_0c4f59e48d5f();
				InternalClientConnection_Client_8466908635430828435_ClientConnection_Client_8466908635430828435_clientName.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalClientConnection_Client_8466908635430828435_ClientConnection_Client_8466908635430828435_clientName)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (Client).clientName");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncClientConnection] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
